package pages

import "github.com/ChrisRx/chrisrx-dev/components"

var packages = []string{
	"go.chrisrx.dev/x/assert",
	"go.chrisrx.dev/x/backoff",
	"go.chrisrx.dev/x/chans",
	"go.chrisrx.dev/x/context",
	"go.chrisrx.dev/x/env",
	"go.chrisrx.dev/x/expr",
	"go.chrisrx.dev/x/future",
	"go.chrisrx.dev/x/group",
	"go.chrisrx.dev/x/safe",
	"go.chrisrx.dev/x/set",
	"go.chrisrx.dev/x/sync",
}

templ Index() {
	@components.Page() {
		@components.Head() {
			@style()
		}
		@components.Body() {
			<div class="sticky-container" id="stickyContainer">
				<div class="webgl-section" id="webglSection">
					<div class="canvas-container" id="canvasContainer">
						<canvas id="space"></canvas>
					</div>
				</div>
			</div>
			@warpspeed()
			<div class="bg-mobile">
				<img src="../assets/images/skull.gif" class="w-full h-full absolute float-right object-cover" alt=""/>
			</div>
			<div class="lg:grid lg:grid-cols-4">
				<div class="hidden lg:block">
					<img src="../assets/images/skull.gif" class="h-full float-right object-cover" alt=""/>
				</div>
				<div class="lg:col-span-2">
					<div class="mx-auto flex lg:max-w-3xl h-screen items-center -z-1">
						@components.Card(components.Class("bg-silver", "border-1", "border-grey", "w-full", "max-h-screen")) {
							@components.Header(components.Class("bg-windows-blue h-[22px]")) {
								@components.Title(components.Class("text-[#f5f5f5]")) {
									<div class="h-full flex items-center font-bold text-[6px] ml-[2px]">
										Netscape Navigator 3.0
									</div>
								}
								<img class="object-right object-fill m-[2px]" src="../assets/images/btn-close@2x.png"/>
							}
							<div class="flex">
								<div class="w-full bg-silver">
									<div class="flex flex-row w-full min-h-[24px] items-center pl-[5px] netscape-toolbar">
										<div class="text-[9px]">
											Location:
										</div>
										<div class="bg-white w-full inset-shadow-[0_0_0_1px_#000] border-t-1 border-t-[#808080] border-l-1 border-l-[#808080] pl-[2px] m-[3px] text-[9px] text-nowrap overflow-hidden">
											https://go.chrisrx.dev
										</div>
									</div>
									<div class=" flex flex-row w-full min-h-[24px] items-center pl-[5px] netscape-toolbar">
										<div id="whats-new" class="netscape-button">What's New</div>
										<div x-data="" @click="toggleWarpSpeed" id="whats-cool" class="netscape-button">What's Cool</div>
									</div>
								</div>
								<div class="min-h-[48px]">
									<img class="object-fill aspect-square min-w-[48px] min-h-[48px]" height="40" width="40" src="../assets/images/netscape.gif"/>
								</div>
							</div>
							@components.Content(components.Class("overflow-auto", "h-3/4", "h-[60vh]", "overscroll-none", "bg-blue-maze")) {
								<div class="w-full border-t-1 border-t-black border-l-1 border-l-black border-r-1 border-r-grey border-b-1 border-b-grey">
									<div>
										<img src="../assets/images/under-construction.gif" class="w-full object-contain object-center"/>
									</div>
									<div x-data="" @click="toggle" class="marquee">
										for range 2 {
											<div>
												for range 3 {
													<img src="../assets/images/doot.gif" class="max-w-none h-full object-scale-down object-center"/>
												}
											</div>
										}
									</div>
									<div>
										<img src="../assets/images/bar.gif" class="w-full object-contain object-center"/>
									</div>
									<div class="p-5">
										<div class="flex flex-row">
											<table class="w-full text-2x1">
												<tr>
													<th class="bg-stars"><h2 class="font-comic-sans text-red-600">Packages</h2></th>
												</tr>
												for _, pkg := range packages {
													<tr>
														<td class="bg-clouds font-comic-sans font-bold text-green-700 text-center"><a href={ templ.SafeURL("https://pkg.go.dev/" + pkg) }>{ pkg }</a></td>
													</tr>
												}
											</table>
										</div>
									</div>
								</div>
							}
						}
					</div>
				</div>
				<div class="hidden lg:block">
					<img src="../assets/images/skull.gif" class="h-full object-cover" alt=""/>
				</div>
			</div>
			<audio src="assets/topgun.mp3" id="player"></audio>
		}
	}
}

templ style() {
	<link rel="preconnect" href="https://fonts.googleapis.com"/>
	<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin/>
	<link href="https://fonts.googleapis.com/css2?family=Comic+Neue:wght@400;700&display=swap" rel="stylesheet"/>
	<link href="https://fonts.googleapis.com/css2?family=Silkscreen:wght@400;700&display=swap" rel="stylesheet"/>
	<script defer src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js"></script>
	<script src="https://cdn.jsdelivr.net/npm/@tailwindcss/browser@4"></script>
	<script type="text/javascript">
		function toggle(e) {
			player = document.getElementById("player");
			player.paused ? player.play() : player.pause();
		}
	</script>
	<style type="text/tailwindcss">
		* {
			/* https://www.cursors-4u.com/cursor/2006/06/09/spe115.html */
			cursor: url(../assets/spe115.cur), auto !important;
		}
		html {
			background-color: #fff;
			font-family: Silkscreen;
			background-image: url("../assets/images/bg-space.gif");
			background-repeat: repeat;
		}
		img {
			image-rendering: pixelated;
		}
		table {
			border: 2px outset #000;
			border-spacing: 2px;
			border-collapse: separate;
		}
		table td, th {
			padding: 1px;
			border-spacing: 2px;
			border: 1px inset #000;
		}
		marquee {
			font-size: 4rem;
			color: white;
			font-family: 'Comic Neue', cursive, sans-serif;
		}
		.bg-space {
			background-image: url("../assets/images/bg-space.gif");
			background-repeat: repeat;
		}
		.bg-clouds {
			background-image: url("../assets/images/clouds.jpg");
			background-repeat: repeat;
		}
		.bg-stars {
			background-image: url("../assets/images/bg-starry.jpg");
			background-repeat: repeat;
		}
		.bg-blue-maze {
			background-image: url("../assets/images/bg-blue-maze.gif");
			background-repeat: repeat;
		}
		.netscape-button {
			background-color: var(--color-grey);
			border: 1px outset #fff;
			color: #000;
			font-size: 7px;
			padding: 1px 2px;
			cursor: pointer;
			box-shadow: 1px 1px 0px #000, 1px 1px 0px #000, 1px 1px 0px #000;
			transition: all 0.05s ease-in-out;
			margin: 3px 2px;
			white-space: nowrap;
			user-select: none;
		}
		.netscape-button:active {
			transform: translate(0.5px, 0.5px);
			box-shadow: 1px 1px 0px #000, 1px 1px 0px #000, 1px 1px 0px #000, 1px 1px 0 #777;
		}

		.marquee {
			--gap: 1rem;
			position: relative;
			display: flex;
			overflow: hidden;
			user-select: none;
			gap: var(--gap);
		}

		.marquee > * {
			flex-shrink: 0;
			display: flex;
			justify-content: space-around;
			gap: var(--gap);
			min-width: 100%;
			animation: marquee 3s linear infinite;
		}

		@keyframes marquee {
			from {
				transform: translateX(0);
			}
			to {
				transform: translateX(calc(-100% - var(--gap)));
			}
		}

		@media screen and (min-width: 1024px) {
			.bg-mobile {
				display: none;
			}
		}

		@media screen and (max-width: 1024px) {
			.bg-mobile {
				background-image: url("../assets/images/skull.gif");
				background-size: cover;
				z-index: -9999;
				position: fixed;
				width: 100%;
				height: 100%;
			}
		}

		@tailwind base;
		@tailwind components;
		@tailwind theme;
		@tailwind utilities;

		@theme {
			--color-green: #155362;
			--color-grey: #c0c0c0;
			--color-silver: #777;
			--color-windows-blue: #000080;
			--font-comic-sans: 'Comic Neue', cursive, sans-serif; 
			--font-silkscreen: "Silkscreen", sans-serif;
		}

		@layer components {
			.netscape-toolbar {
				@apply bg-grey
							 border-t-1
							 border-t-white
							 border-l-1
							 border-l-silver
							 border-r-1
							 border-r-silver
							 border-b-1
							 border-b-silver
							 text-black;
			}
		}
	</style>
}

// Adapted from https://codepen.io/filipz/pen/jEENJww
templ warpspeed() {
	<style>
		.sticky-container {
			position: absolute;
			height: 100%;
			width: 100%;
			margin: 0;
			pointer-events: none;
			/* z-index: -1; */
		}
		.webgl-section {
			position: sticky;
			top: 0;
			left: 0;
			width: 100%;
			height: 100vh;
			display: flex;
			justify-content: center;
			align-items: center;
			z-index: 10;
			overflow: hidden;
			will-change: transform, opacity, filter;
		}
		.canvas-container {
			width: 100%;
			height: 100%;
			position: relative;
			will-change: transform, opacity, filter;
			display: flex;
			justify-content: center;
			align-items: center;
		}
		canvas#space {
			position: absolute;
			top: 0;
			left: 0;
			width: 100%;
			height: 100%;
			display: block;
		}
	</style>
	<script type="text/javascript">
		// Setup canvas and context
		const canvas = document.getElementById("space");
		const ctx = canvas.getContext("2d");
		canvas.width = canvas.offsetWidth;
		canvas.height = canvas.offsetHeight;
		// Starfield settings
		const numStars = 5000;
		const focalLength = canvas.width * 2;
		let centerX = canvas.width / 2;
		let centerY = canvas.height / 2;
		const baseTrailLength = 2;
		const maxTrailLength = 25;
		// Stars array
		let stars = [];
		// Animation control
		let warpSpeed = 0;
		let animationActive = false;
		// Initialize stars
		function initializeStars() {
			stars = [];
			for (let i = 0; i < numStars; i++) {
				stars.push({
					x: Math.random() * canvas.width,
					y: Math.random() * canvas.height,
					z: Math.random() * canvas.width,
					o: 0.5 + Math.random() * 0.5,
					trail: []
				});
			}
		}
		// Update star positions
		function moveStars() {
			for (let i = 0; i < stars.length; i++) {
				const star = stars[i];
				// Move star based on warp speed - always forward
				const speed = 1 + warpSpeed * 50;
				star.z -= speed;
				// Reset star position when it passes the viewer
				if (star.z < 1) {
					star.z = canvas.width;
					star.x = Math.random() * canvas.width;
					star.y = Math.random() * canvas.height;
					star.trail = [];
				}
			}
		}
		// Draw stars and their trails
		function drawStars() {
			// Resize canvas if needed
			if (
				canvas.width !== canvas.offsetWidth ||
				canvas.height !== canvas.offsetHeight
			) {
				canvas.width = canvas.offsetWidth;
				canvas.height = canvas.offsetHeight;
				centerX = canvas.width / 2;
				centerY = canvas.height / 2;
			}
			// Calculate trail length based on warp speed
			const trailLength = Math.floor(
				baseTrailLength + warpSpeed * (maxTrailLength - baseTrailLength)
			);
			// Clear canvas with fade effect based on warp speed
			clearStars()
			// Draw stars and trails
			for (let i = 0; i < stars.length; i++) {
				const star = stars[i];
				// Calculate screen position with perspective
				const px = (star.x - centerX) * (focalLength / star.z) + centerX;
				const py = (star.y - centerY) * (focalLength / star.z) + centerY;
				// Add position to trail
				star.trail.push({
					x: px,
					y: py
				});
				if (star.trail.length > trailLength) {
					star.trail.shift();
				}
				// Draw trail
				if (star.trail.length > 1) {
					ctx.beginPath();
					ctx.moveTo(star.trail[0].x, star.trail[0].y);
					for (let j = 1; j < star.trail.length; j++) {
						ctx.lineTo(star.trail[j].x, star.trail[j].y);
					}
					ctx.strokeStyle = `rgba(209,255,255,${star.o})`;
					ctx.lineWidth = 1;
					ctx.stroke();
				}
				// Draw star
				ctx.fillStyle = `rgba(209,255,255,${star.o})`;
				ctx.fillRect(px, py, 1, 1);
			}
		}

		function clearStars() {
			const clearAlpha = 1 - warpSpeed * 0.8;
			ctx.fillStyle = `rgba(17,17,17,${clearAlpha})`;
			ctx.clearRect(0, 0, canvas.width, canvas.height);
		}

		// Animation loop
		function animate() {
			if (animationActive) {
				requestAnimationFrame(animate);
				moveStars();
				drawStars();
			}
		}

		function toggleWarpSpeed() {
			if (animationActive == false) {
				console.log("hit it!")
				animationActive = true;
				initializeStars();
				warpSpeed = 0.25;
				animate();
				id = setInterval(function() {
					if (warpSpeed == 0) {
						warpSpeed = 0.25;
					} else if (warpSpeed <= 0.70) {
						warpSpeed = 1 - Math.exp(-2 * warpSpeed);
					} else {
						warpSpeed = 0.80;
						clearInterval(id)
					}
				}, 100)
			} else {
				animationActive = false;
				clearStars();
			}
		}

		// Handle window resize
		window.addEventListener("resize", () => {
			canvas.width = canvas.offsetWidth;
			canvas.height = canvas.offsetHeight;
			centerX = canvas.width / 2;
			centerY = canvas.height / 2;
		});
	</script>
}
